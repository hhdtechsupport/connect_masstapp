<?php
/**
 * @file
 * Send anonymous users to locations depending on their request.
 */

/**
 * Implements hook_menu().
 */
function anon_redirect_menu() {
  $items = array();

  $items['admin/config/administration/anon_redirect'] = array(
    'title' => 'Anonymous User Redirect',
    'description' => 'Determine what happens to anonymous users.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anon_redirect_admin_settings'),
    'access arguments' => array('access administration pages'),
    );

  return $items;
}

/**
 * Implements hook_init().
 *
 * Prevent leaving the login page when they need to update their data.
 */
function anon_redirect_init() {
  // Note that the $user object does not contain fields.
  global $user;

  // We are only worried about anonymous users.
  if (user_is_anonymous()) {
    // Front page can be ignored.
    if (drupal_is_front_page()) {
      return;
    }

    // Certain node addresses are a bit more special.
    if (arg(0) == 'node') {
      $node = node_load(arg(1));
      if ($node) {
        $allowed_types = variable_get('anon_redirect_content_types_allow', array());
        if (in_array($node->type, $allowed_types)) {
          // We let anon users go straight to these types.
          return;
        }
      }

      // If we land on a page of these types, go to the portals login.
      $portal_types = variable_get('anon_redirect_portal_types', array());
       if (in_array($node->type, $portal_types)) {
        // We redirect anon users to the special login.
        drupal_goto('portals', array(), '302');
      }
    }

    // Where they are trying to go.
    $requested_path = $_GET['q'];

    // Check if it is an allowed special path.
    $allowed_paths = array_merge(variable_get('anon_redirect_allowed_paths', array()),
      variable_get('anon_redirect_additional_paths', array()));
    if (in_array($requested_path, $allowed_paths)) {
      return;
    }

    // Does it start with something we allow?
    $starts_with = variable_get('anon_redirect_starts_with_paths', array());
    foreach ($starts_with as $path) {
      if (substr($requested_path, 0, strlen($path)) == $path) {
        // Yes, okie dokie.
        return;
      }
    }

    // Does it end with something we allow?
    $ends_with = variable_get('anon_redirect_ends_with_paths', array());
    if (!empty($ends_with)) {
      $last = strrpos($requested_path, '/');
      if ($last !== FALSE) {
        $last = substr($requested_path, $last + 1);
        if (in_array($last, $ends_with)) {
          // Yes, okie dokie.
          return;
        }
      }
    }
  }
}

/**
 * Implements hook_help
 */
function anon_redirect_help($path, $arg) {
  switch ($path) {
    case "admin/help/anon_redirect":
      $output = t("This module provides an Admin interface to redirect
        anonymous (non-logged in) users to various locations based upon
        the requested URL.") ;
      return $output;
      break;
  }
}

/**
 * Main settings form.
 */
function anon_redirect_admin_settings($form, &$form_state) {
  global $user, $base_url, $base_path;
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'anon_redirect') . '/anon_redirect.css',
    );

  // Descriptive stuff.
  $form['description'] = array(
    '#type' => 'markup',
    '#markup' => '<div class="anon-redirect-intro">'
      . t("This module provides an Admin interface to redirect anonymous
      (non-logged in) users to various locations based upon the requested URL.")
      . '<p class="note">'
      . t("<strong>Note</strong>: Do not include '@base' in the following fields.",
        array('@base' => $base_url . $base_path))
      . '</p></div>',
    );

  $form['table'] = array(
    '#type' => 'table',
    );

  $node_types = node_type_get_names();
  $form['table'][0]['anon_redirect_content_types_allow'] = array(
    '#type' => 'checkboxes',
    '#options' => $node_types,
    '#title' => t('Allowed direct access'),
    '#default_value' => variable_get('anon_redirect_content_types_allow', array()),
    '#description' => t("If the user's request is to these content types,
      allow the access to continue."),
    );

  $form['table'][0]['anon_redirect_portal_types'] = array(
    '#type' => 'checkboxes',
    '#options' => $node_types,
    '#title' => t('Portal content types'),
    '#default_value' => variable_get('anon_redirect_portal_types', array()),
    '#description' => t("If the user's request is to these content types,
      redirect them to the Portals login."),
    );

  // In order to find special URL paths, we start by looking at Pathauto.
  // The paths generated by that module are not generally considered
  // special.
  $pathauto_settings = module_invoke_all('pathauto', 'settings');
  $patterns = array();
  foreach ($pathauto_settings as $settings) {
    $module = $settings->module;
    // We're only interested in node entities.
    if ($module != 'node') {
      continue;
    }

    $patterns['_default'] = $settings->patterndefault;

    // Get the pattern for each content type.
    $query = "SELECT source, alias FROM url_alias WHERE ";
    $x = array(
      "alias NOT LIKE 'users/%'",
      "alias NOT LIKE 'subscribers/%'",
      "source NOT LIKE 'taxonomy/%'",
      );

    // Add a WHERE clause to skip this pattern.
    foreach ($settings->patternitems as $itemname => $itemlabel) {
      $variable = 'pathauto_' . $module . '_' . $itemname . '_pattern';
      $patt = variable_get($variable, '');
      $result = preg_replace('/\[[^\]]*]/', '%', $patt);

      // If the pattern has no standard text (e.g. [node:title]),
      // then we have to skip it because everything would match.
      if ($result != '%') {
        $x[] = "alias NOT LIKE '$result'";
      }
      $patterns[$itemname] = $patt;
    }
    $query .= implode(' AND ', $x);
  }
  $result = db_query($query)->fetchAllKeyed();
  $form['#paths'] = $result;
  $form['table'][1]['anon_redirect_allowed_paths'] = array(
    '#type' => 'select',      // This allows Chosen to get involved.
    '#title' => t('Allowed paths'),
    '#size' => min(20, count($result)),
    '#options' => $result,
    '#multiple' => TRUE,
    '#default_value' => variable_get('anon_redirect_allowed_paths', ''),
    '#description' => t("The list is of URL aliases that don't seem to be
      created by Pathauto, so may be special paths.
      Click in the box to see the list and select an item.
      The user will be allowed to proceed to these URL paths."),
    );

  $form['table'][1]['anon_redirect_additional_paths'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#title' => t('Additional Paths'),
    '#default_value' => _anon_redirect_admin_unsplit(variable_get('anon_redirect_additional_paths', array())),
    '#description' => t("Specify additional URLs or aliases that
      should be treated as special paths for user access.
      Enter one per line."),
    );

  $form['table'][2]['anon_redirect_starts_with_paths'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#title' => t('Path starts with'),
    '#default_value' => _anon_redirect_admin_unsplit(variable_get('anon_redirect_starts_with_paths', array())),
    '#description' => t("Specify the beginning portion of a URL that will be
      allowed; anything after the trailing '/' will be ignored.
      Enter one per line."),
    );

  $form['table'][2]['anon_redirect_ends_with_paths'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#title' => t('Path ends with'),
    '#default_value' => _anon_redirect_admin_unsplit(variable_get('anon_redirect_ends_with_paths', array())),
    '#description' => t("Specify the ending portion of a URL that will be
      allowed; anything before this will be ignored.
      Enter one per line."),
    );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save something'),
    );

  return $form;
}

/**
 * Main settings form submission handler.
 */
function anon_redirect_admin_settings_submit(&$form, &$form_state) {
//  dpm($form_state, __FUNCTION__);
  // Move all the table-ized variables up t the top.
  foreach ($form_state['values']['table'] as $stuff) {
    foreach ($stuff as $var => $value) {
      $form_state['values'][$var] = $value;
    }
  }

  // Save the values.
  variable_set('anon_redirect_content_types_allow',
    array_filter($form_state['values']['anon_redirect_content_types_allow']));
  variable_set('anon_redirect_portal_types',
    array_filter($form_state['values']['anon_redirect_portal_types']));

  variable_set('anon_redirect_allowed_paths', $form_state['values']['anon_redirect_allowed_paths']);
  variable_set('anon_redirect_additional_paths',
    _anon_redirect_admin_split($form_state['values']['anon_redirect_additional_paths']));

  variable_set('anon_redirect_starts_with_paths',
    _anon_redirect_admin_split($form_state['values']['anon_redirect_starts_with_paths']));
  variable_set('anon_redirect_ends_with_paths',
    _anon_redirect_admin_split($form_state['values']['anon_redirect_ends_with_paths']));
}

/**
 * Helper function.
 */
function _anon_redirect_admin_split($text) {
  $ret = explode("\n", $text);
  return array_filter($ret);
}

/**
 * Helper function.
 */
function _anon_redirect_admin_unsplit($array) {
  return implode("\n", $array);
}
