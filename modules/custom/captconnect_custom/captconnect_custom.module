<?php
/**
 * @file
 * Custom Code for CAPTConnect.
 */

/**
 * Implements hook_permission().
 */
function captconnect_custom_permission() {
  $perms = array(
    'view registrations' => array(
      'title' => t('View Registrations'),
      'description' => t('View Registrations on Events.'),
      'restrict access' => FALSE,
      ),
    'register others' => array(
      'title' => t('Register Others'),
      'description' => t('Register another user.'),
      'restrict access' => FALSE,
      ),
    );
  return $perms;
}

/**
 * Implements hook_menu().
 */
function captconnect_custom_menu() {
  $items = array();

  $items['node/%node/notifications'] = array(
    'title' => 'Notifications',
    'page callback' => 'captconnect_custom_view_notifications',
    'page arguments' => array(1),
    'access callback' => 'captconnect_custom_access_notifications',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    );

  $items['node/%node/registrations'] = array(
    'title' => 'Registrations',
    'page callback' => 'captconnect_custom_view_registrations',
    'page arguments' => array(1),
    'access callback' => 'captconnect_custom_access_registrations',
    'access arguments' => array(1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    );

  $items['event/participate/%node/%user'] = array(
    'title' => 'Flag participation for someone else',
    'page callback' => 'captconnect_custom_participate_someone_else',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    );

  $items['admin/config/administration/captconnect'] = array(
    'title' => 'CAPT Connect',
    'description' => 'Various settings to control CAPT Connect custom functions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('captconnect_custom_admin_settings'),
    'access arguments' => array('access administration pages'),
    'file' => 'captconnect_custom.admin.inc',
    'weight' => 2,
    'type' => MENU_NORMAL_ITEM,
    );

  $items['register_others'] = array(
    'title' => 'Register Another',
    'description' => 'Register on behalf of someone else.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('captconnect_custom_register_other'),
    'access arguments' => array('register others'),
    'type' => MENU_CALLBACK,
    );

  $items['participate_others'] = array(
    'title' => 'Participate Another',
    'description' => 'Participate on behalf of someone else.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('captconnect_custom_participate_other'),
    'access arguments' => array('register others'),
    'type' => MENU_CALLBACK,
    );

  $items['anon_register'] = array(
    'title' => 'Anonymous Registration',
    'description' => 'Create user then register.',
    'page callback' => 'captconnect_custom_anon_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    );

  $items['nancy'] = array(
    'title' => 'Nancy',
    'description' => 'Stuff that needs a menu item',
    'page callback' => 'captconnect_custom_nancy',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Implements hook_theme().
 */
function captconnect_custom_theme() {
  return array(
    'captconnect_custom_admin_settings' => array(
       'render element' => 'form',
       'file' => 'captconnect_custom.admin.inc',
       ),
    );
}

/**
 * Implements hook_menu_alter().
 */
function captconnect_custom_menu_alter(&$items) {
  $items['user']['title callback'] = 'captconnect_custom_user_page_title';

  // Get rid of the User View tab.
  // Make user.view not a default tab.
  $items['user/%user/view']['type'] -= MENU_LINKS_TO_PARENT;
  // Make user.edit the default tab.
  $items['user/%user/edit']['type'] |= MENU_LINKS_TO_PARENT;

  // Try to hide "Log in" and "Request new password" tabs.
  $items['user/password']['type'] = MENU_CALLBACK;
  $items['user/login']['access callback'] = 'captconnect_custom_login_access';
}

/**
 * Menu access callback.
 * Decide whether or not to show the "Login" tabe.
 */
function captconnect_custom_login_access() {
  if ($_GET['q'] == 'user/register') {
    return FALSE;
  }

  // Menu administrators can see items for anonymous when administering.
  return !$GLOBALS ['user']->uid || !empty($GLOBALS ['menu_admin']);
}

/**
 * Menu access callback.
 * Decide whether or not to show the "Registrations" tab on Events.
 */
function captconnect_custom_access_registrations($node) {
  return ($node->type == 'event' && user_access('view registrations'));
}

/**
 * Menu access callback.
 * Decide whether or not to show the "Notifications" tab on Events.
 */
function captconnect_custom_access_notifications($node) {
  if ($node->type == 'event') {
    $notification = field_get_items('node', $node, 'field_related_notifications');
    if ($notification) {
      $notification = $notification[0]['target_id'];
      return node_access('update', node_load($notification));
    }
  }
  return FALSE;
}

/**
 * Menu callback.
 * Put the related Notifications into edit moode.
 */
function captconnect_custom_view_notifications($node) {
  if ($node->type == 'event') {
    $notification = field_get_items('node', $node, 'field_related_notifications');
    if ($notification) {
      $notification = array_pop(array_pop($notification));
      module_load_include('inc', 'node', 'node.pages');
      return node_page_edit(node_load($notification));
    }
  }
}

/**
 * User sort funtion for instances.
 */
function _captconnect_custom_sort_instances($a, $b) {
  // If the start times are the same, then we look at the end times.
  if ($a['start'] == $b['start']) {
    if ($a['end'] == $b['end']) {
      return 0;
    }
    else {
      return ($a['end'] < $b['end'] ? -1 : 1);
    }
  }
  else {
    return ($a['start'] < $b['start'] ? -1 : 1);
  }
}

/**
 * Menu callback.
 * View the registrations for the Event.
 */
function captconnect_custom_view_registrations($node) {
  global $user;
  if ($node->type == 'event') {
    drupal_set_title(t('Registrations for event "!title"', array('!title' => $node->title)));
    $css = "#registrations-list .join-link.mark a {font-weight: normal !important; color: #000099 !important;}
      #registrations-list .join-link.proxy a {font-style: italic;; color: #000099 !important;}
      td.instance-label {font-size: 1.2em; text-align: center;}
      td.access-information {background-color: #ffffcc;}
      #registrations-list a {color: inherit !important;}
      ";
    drupal_add_css($css, 'inline');

    $table = array(
      'rows' => array(),
      'header' => array(
        t('Registrant'),
        t('Registered'),
        t('Cancel Registration'),
        t('Participation'),
        ),
      'attributes' => array(
        'id' => 'registrations-list',
        ),
      'sticky' => TRUE,
      'empty' => t('There are currently no instances of this event.'),
      );
    $event = entity_metadata_wrapper('node', $node);
    $flag = flag_get_flag('participate');

    // Query for registrations below.
    $reg_query = "SELECT uid, timestamp FROM {flagging} "
      . "WHERE entity_id = :instance "
      . "AND fid = 2 "      // Registration.
      ;

    // Get all the instances.
    $instances = array();
    foreach ($event->field_date_instance->getIterator() as $instance) {
      $dates = $instance->field_date->value();
      $start_time = strtotime($dates['value'] . ' UTC');
      $end_time = strtotime($dates['value2'] . ' UTC');
      $instances[] = array('start' => $start_time, 'end' => $end_time, 'instance' => $instance);
    }
    usort($instances, '_captconnect_custom_sort_instances');

    foreach ($instances as $instance_data) {
      $instance = $instance_data['instance'];
      $dates = $instance->field_date->value();
      $start_time = $instance_data['start'];
      $lead_time = variable_get('captconnect_custom_participate_lead_time', 1800);

      // Is the event instance past?
      $instance_is_past = ($instance_data['end'] < REQUEST_TIME);

      if (user_access('edit any instance content')
      || (user_access('edit own instance content') && $instance->uid->value() == $user->uid)) {
        $title_link = l($instance->label(), 'node/' . $instance->nid->value() . '/edit',
          array('query' => drupal_get_destination()));

      }
      else {
        $title_link = $instance->label();
      }

      if ($instance_is_past) {
        $title_link .= ' <span class="instance-complete">' . t('Complete') . '</span>';
      }

      $table['rows'][] = array(array(
        'data' => $title_link,
        'colspan' => 20,
        'class' => array('instance-label'),
        ));

      // Get the event join link.
      // @TODO: Only show for a short time before the event?
      $link = $instance->field_link->value();

      // Get all the registration details.
      $rows = db_query($reg_query, array('instance' => $instance->nid->value()))->fetchAllKeyed();

      if (count($rows) > 0) {
        $users = entity_load('user', array_keys($rows));
        foreach ($users as $uid => $account) {
          $registrant = (user_access('administer users') ?
            l(format_username($account), "user/$account->uid/edit") : format_username($account));

          $participated = db_query("SELECT 1 FROM {flagging} WHERE entity_id = :nid AND uid = :uid AND fid = 1 ",
            array(':nid' => $instance->nid->value(), ':uid' => $uid))->fetchField();
          $join_class = array('join-link');

          if ($instance_is_past) {
            if ($participated) {
              $join = t('Participated');
            }
            else {
              $query = drupal_get_destination();
              $query += array('token' => flag_get_token($instance->nid->value()));
              $attrs = array('title' => $flag->get_label('flag_long', $instance->nid->value()));
              $join_class[] = 'mark';
              $join = l(t('Mark as participated'), 
                'event/participate/' . $instance->nid->value() . '/' . $account->uid,
                array('query' => $query, 'attributes' => $attrs));
            }
          }
          else {
            // Only show flag after half an hour before the event, for our own events.
          $lead_time = 86400 * 600;
            if ((REQUEST_TIME > $start_time - $lead_time) && ($user->uid == $account->uid)) {
              $join = flag_create_link('participate', $instance->nid->value(), array());
            }  // or flag('flag', $flag_action, $instance->nid, $account) somehow.
            else {
              if ($participated) {
                $join = t('Particpating');
              }
              else {
                if (REQUEST_TIME > $start_time - $lead_time) {
                  $query = drupal_get_destination();
                  $query += array('token' => flag_get_token($instance->nid->value()));
                  $attrs = array('title' => $flag->get_label('flag_long', $instance->nid->value()));
                  $join_class[] = 'proxy';
                  $join = l($flag->get_label('flag_short', $instance->nid->value()),
                    'event/participate/' . $instance->nid->value() . '/' . $account->uid,
                    array('query' => $query, 'attributes' => $attrs));
                }
                else {
                  $join = t('Starts in approximately @interval', array('@interval' => format_interval($start_time - REQUEST_TIME, 1)));
                }
              }
            }
          }

          $table['rows'][] = array(
            array('data' => $registrant, 'class' => array('registrant_name')),
            array('data' => format_date($rows[$uid]), 'class' => array('date_registered')),
            array('data' => l(t('Cancel'), 'flag/unflag/registration/' . $instance->nid->value()), 'class' => array('cancel_link')),
            array('data' => $join, 'class' => $join_class),
            );
        }
      }
      else {
        $table['rows'][] = array(array(
          'data' => t('There are no registrations for this instance yet.'),
          'colspan' => 20,
          'class' => array('no-registrations'),
          ));
      }

      // Display Access information.
      $text = $instance->field_access_information->value();
      if (!empty($text['value'])) {
        $table['rows'][] = array(array(
          'data' => check_markup($text['value'], $text['format']),
          'colspan' => 20,
          'class' => array('access-information'),
          ));
      }
    }

    if (user_access('register others') && variable_get('captconnect_custom_proxy_display', 'registration') == 'registration') {
      $register_others = captconnect_custom_proxy_registration_button();
    }
    else {
      $register_others = NULL;
    }

    return theme('table', $table) . drupal_render($register_others);
  }
}

/**
 * Particpate flag for someone else.
 */
function captconnect_custom_participate_someone_else($instance, $account) {
  $token = $_GET['token'];
  if ($token == flag_get_token($instance->nid)) {
    if (!flag('flag', 'participate', $instance->nid, $account)) {
      drupal_set_message(t('@name participation in "@title" failed,',
      array('@name' => format_username($account), '@title' => $instance->label()), 'error'));
    }
  }
  else {
    drupal_set_message(t('Invalid token in link.'));
  }
  drupal_goto();
}

/**
 * Menu title callback.
 * Various titles for the user page, depending on why we're here.
 */
function captconnect_custom_user_page_title() {
  global $user;
  if (user_is_logged_in()) {
    $title = t('My account');
  }
  else {
    $path = drupal_get_path_alias($_GET['q']);

    switch ($path) {
      case 'user/password':
        $title = t('Request new password');
        break;

      case 'user/register':
        $title = t('User Registration');
        break;

      default:
        $title = t('Log in');
        break;
    }
  }
  return $title;
}

/**
 * Implements hook_module_implements_alter().
 * Make Node_Save_redirect last to run. See https://www.drupal.org/node/2476031.
 */
function captconnect_custom_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['node_save_redirect'])) {
    $group = $implementations ['node_save_redirect'];
    unset($implementations['node_save_redirect']);
    $implementations['node_save_redirect'] = $group;
  }
}

/**
 * Implements hook_form_alter().
 */
function captconnect_custom_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
      // This doesn't actually work.
      $form['#submit'][] = 'captconnect_custom_user_register_submit';
      break; /* */

    // Save the current path and grab the submit handler.
    case 'event_notifications_node_form':
      $form['#where_to'] = $_GET['q'];
      break; /* */
  }
//  dpm($form, $form_id);
}

/**
 * Implements hook_form_alter().
 * Load node.pages.inc from Node module.
 */
function captconnect_custom_form_node_form_alter(&$form, &$form_state, $form_id) {
  form_load_include($form_state, 'inc', 'node', 'node.pages');
}

/**
 * Implements hook_username_alter().
 * Invoked by format_username();
 */
function captconnect_custom_username_alter(&$name, $account) {
  static $names = array();

  if (!is_object($account)) {
    return t('Invalid User');
  }

  // If the uid is 0 or not present, assume the user is anonymous.
  // Also, new users don't have a profile built yet, so just go away.
  if (empty($account->uid) || (isset($account->is_new) && $account->is_new)) {
    return variable_get('anonymous', t('Anonymous'));
  }

  if (isset($names[$account->uid])) {
    $name = $names[$account->uid];
    return;
  }

  // Sometimes we don't get a full user object.
  if (!isset($account->field_first_name)) {
    $account = user_load($account->uid);
  }

  // Get their first name. It will be FALSE if not given.
  $first = field_get_items('user', $account, 'field_first_name');
  if ($first) {
    $first = $first[0]['value'];
  }
  else {
    $first = t('unknown');
  }
  // Likewise, the last name.
  $last = field_get_items('user', $account, 'field_last_name');
  if ($last) {
    $last = $last[0]['value'];
  }
  else {
    $last = t('unknown');
  }

  // Save it and return.
  $name = $first . ' ' . $last;
  $names[$account->uid] = $name;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Put a class wrapper on the workflow_transition_form.
 * See https://www.drupal.org/node/2510958
 */
function captconnect_custom_form_workflow_transition_form_alter(&$form, &$form_state, $form_id) {
  $current_sid = $form['#default_value'];
  $current_state = workflow_state_load_single($current_sid);
  $class = drupal_html_class('state-' . ($current_state ? workflow_get_sid_label($current_sid) : 'unknown state'));
  $form['#attributes']['class'] = array('workflow-transition-form', $class);
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function captconnect_custom_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'notifications') {
    $form['field_related_event']['#access'] = FALSE;
    $form['field_related_event'][LANGUAGE_NONE]['#access'] = FALSE;
    // Load node.pages.inc from Node module.
    form_load_include($form_state, 'inc', 'node', 'node.pages');
  }
}

/**
 * Implements hook_inline_entity_form_table_fields_alter().
 */
function captconnect_custom_inline_entity_form_table_fields_alter(&$fields, $context) {
  // Make sure there's a stock field on each of the allowed types.
  $instances = FALSE;
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle == 'instance') {
      $instances = TRUE;
    }
  }
  $presenters = FALSE;
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle == 'presenter') {
      $presenters = TRUE;
    }
  }
  $materials = FALSE;
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle == 'material') {
      $materials = TRUE;
    }
  }
  $notifications = FALSE;
  foreach ($context['allowed_bundles'] as $bundle) {
    if ($bundle == 'notification') {
      $notifications = TRUE;
    }
  }

  // Replace fields shown for date instances
  if ($instances) {
    unset($fields['status']);
    $fields['field_max_registration'] = array(
      'type' => 'field',
      'label' => t('Max Registrations'),
      'weight' => 2
      );
  }

  // Replace fields shown for presenters
  if ($presenters) {
    unset($fields['status']);
    $fields['field_body'] = array(
      'type' => 'field',
      'label' => t('Presenter description'),
      'weight' => 2,
      'settings' => array(
        'trim_length' => 200
        )
      );
    $fields['field_presenter_image'] = array(
      'type' => 'field',
      'label' => t('Presenter image'),
      'weight' => 3,
      'settings' => array(
        'image_style' => 'thumbnail'
        )
      );
  }

  // Replace fields shown for date instances
  if ($materials) {
    unset($fields['status']);
    unset($fields['title']);
    $fields['field_source'] = array(
      'type' => 'field',
      'label' => t('Source'),
      'weight' => 2
      );
    $fields['field_resource'] = array(
      'type' => 'field',
      'label' => t('Resource'),
      'weight' => 3
      );
    $fields['field_material'] = array(
      'type' => 'field',
      'label' => t('Material'),
      'weight' => 4
      );
  }

  // Replace fields shown for notifications
  if ($notifications) {
    unset($fields['status']);
    unset($fields['title']);
    $fields['field_email_body'] = array(
      'type' => 'field',
      'label' => t('Body'),
      'weight' => 3
      );
  }
}

/**
 * Submit handler for user registration.
 */
function captconnect_custom_user_register_submit($form, $form_state) {
  // According to user_login_finalize(), the global user is set.
  global $user;

  // Get the instance ID that they will register for when they come back.
  $register_nid = $form_state['captconnect_anon_register'];
  $args = array(
    'uid' => $user->uid,
    'nid' => $register_nid,
    );
  drupal_write_record('captconnect_custom_anon_register', $args);
}

/**
 * Implementation of hook_user_login().
 * @TODO: Should this be user_login_submit()?
 */
function captconnect_custom_user_login(&$edit, $account) {
  $redirect_nid = db_query("SELECT nid FROM {captconnect_custom_anon_register} WHERE uid = :uid",
    array(':uid' => $account->uid))->fetchField();
  dpm($account, 'Login should go to node/' . $redirect_nid);
}

/**
 * Menu Callback.
 * Allow one user to register for someone else.
 */
function captconnect_custom_register_other($form, $form_state) {
  $dest = drupal_get_destination();
  list($x, $nid) = explode('/', $dest['destination']);
  $event = node_load($nid);
  $form['#event'] = $event;
  $form['#flag_action'] = variable_get('captconnect_custom_other_flag', 'registration');

  drupal_set_title(t('Register another person for "@event"', array('@event' => $event->title)), PASS_THROUGH);
  captconnect_custom_proxy_flag_form($event, $form);

  return $form;
}

/**
 * Menu Callback.
 * Allow one user to participate for someone else.
 */
function captconnect_custom_participate_other($form, $form_state) {
  $dest = drupal_get_destination();
  list($x, $nid) = explode('/', $dest['destination']);
  $event = node_load($nid);
  $form['#event'] = $event;
  $form['#flag_action'] = 'participate';

  drupal_set_title(t('Participate another person for "@event"', array('@event' => $event->title)), PASS_THROUGH);
  captconnect_custom_proxy_flag_form($event, $form);

  return $form;
}

/**
 * Helper form_builder for proxy regstration or participation.
 * @param $event - the event node object.
 * @param $form - the form array (by reference).
 */
function captconnect_custom_proxy_flag_form($event, &$form) {
  $instances = array();
  foreach (field_get_items('node', $event, 'field_date_instance') as $instance) {
    $instances[] = $instance['target_id'];
  }

  $form['#instances'] = entity_load('node', $instances);
  $instance_list = array();
  foreach ($form['#instances'] as $nid => $instance) {
    $instance_list[$nid] = $instance->title;
  }

	$form['account'] = array (
		'#type' => 'textfield',
		'#title' => t('Select the user'),
		'#required' => TRUE,
		'#autocomplete_path' => 'user/autocomplete',
  	);

  $form['which_one'] = array(
    '#type' => 'radios',
    '#options' => $instance_list,
    '#title' => t('Select a time for "%event"', array('%event' => $event->title)),
		'#required' => TRUE,
    );

  $form ['actions'] = array('#type' => 'actions', '#weight' => 100);
  $form ['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save my choices'));
  $form ['actions']['cancel'] = array('#type' => 'submit', '#value' => t('Changed my mind'));

  $form['#submit'] = array('captconnect_custom_proxy_flag_form_submit');
}

/**
 * Submit handler.
 */
function captconnect_custom_proxy_flag_form_submit($form, $form_state) {
  $flags = flag_get_flags();

  $flag_action = $form['#flag_action'];
  $flag_title = $flags[$flag_action]->title;

  $account = user_load_by_name($form_state['values']['account']);

  $instance = $form['#instances'][$form_state['values']['which_one']];

  // Okay, let's get 'er done.
  $args = array(
    '@event' => $form['#event']->title,
    '@user' => format_username($account),
    '@time' => $instance->title,
    '@action' => ($flag_action == 'register' ? 'registrered for' : 'participating in'),
    );

  // The flag function returns a boolean to indicate success or failure.
  if (flag('flag', $flag_action, $instance->nid, $account)) {
    drupal_set_message(t('@user is now @action for "@event" at @time.', $args));
  }
  else {
    drupal_set_message(t('Flagging for @user for "@event" at @time failed.', $args));
  }
}

/**
 * Implements hook_node_view();
 */
function captconnect_custom_node_view($node, $view_mode, $langcode) {
  switch ($node->type) {
    case 'event':
      // May we add proxy flag buttons?
      if (user_access('register others') && variable_get('captconnect_custom_proxy_display', 'registration') == 'node') {
        $node->content['register_others'] = captconnect_custom_proxy_registration_button();
        $node->content['participate_others'] = captconnect_custom_proxy_participate_button();
      }
    break;
  }
}

/**
 * Helper to build the register button render array.
 */
function captconnect_custom_proxy_registration_button() {
  return array(
    '#theme' => 'link',
    '#text' => t(variable_get('captconnect_custom_proxy_register_text', 'Register Someone Else')),
    '#path' => 'register_others',
    '#options' => array(
      'attributes' => array('class' => array('button', 'pretty-button', 'register-others-button')),
      'html' => FALSE,
      'query' => drupal_get_destination(),
      ),
    );
}

/**
 * Helper to build the register button render array.
 */
function captconnect_custom_proxy_participate_button() {
  return array(
    '#theme' => 'link',
    '#text' => t(variable_get('captconnect_custom_proxy_participate_text', 'Participate Someone Else')),
    '#path' => 'participate_others',
    '#options' => array(
      'attributes' => array('class' => array('button', 'pretty-button', 'participate-others-button')),
      'html' => FALSE,
      'query' => drupal_get_destination(),
      ),
    );
}

/**
 * Implements hook_field_extra_fields().
 */
function captconnect_custom_field_extra_fields() {
  $extra['node']['event'] = array(
    'display' => array(
      'register_others' => array(
        'label' => t("Register others button"),
        'description' => t('Allow registering someone else by proxy.'),
        'weight' => -99,   // Default to top.
        ),
      'participate_others' => array(
        'label' => t("Participate others button"),
        'description' => t('Allow participating someone else by proxy.'),
        'weight' => -99,   // Default to top.
        ),
      )
    );

  return $extra;
}

/*
 * Implements hook_flag_anon_tokens_alter().
 * Add a token for our URL.
 * Requires local patch, see https://www.drupal.org/node/2527594.
 */
function captconnect_custom_flag_anon_tokens_alter(&$tokens, $link_options) {
  $tokens['[anon_register]'] = check_url(url('anon_register', $link_options));
}

/**
 * Menu Callback.
 * Allow anonymous users to register for events.
 */
function captconnect_custom_anon_register() {
  $dest = drupal_get_destination();
  $parts = explode('/', $dest['destination']);

  // Save our stuff in form_state.
  $form_state = array(
    'cache' => TRUE,
    'captconnect_anon_register' => $parts[1],
    );

  return drupal_build_form('user_register_form', $form_state);
}

/*
 * Implements template_preprocess_node().
 * Add a class to the node so it can be displayed as published or not.
 */
function captconnect_custom_preprocess_node(&$variables) {
  $node = $variables ['node'];
  if (isset($node->field_workflow_state[LANGUAGE_NONE][0]['value'])) {
    $current_state = workflow_state_load_single($node->field_workflow_state[LANGUAGE_NONE][0]['value']);
    $class = ($current_state->name == 'published' ? 'published' : 'in-progress');
    $variables ['classes_array'][] = drupal_html_class('workflow-' . $class);
  }
}

/**
 * Implements hook_workflow().
 */
function captconnect_custom_workflow($op, $id, $new_sid, $entity, $force, $entity_type = '', $field_name = '', $transition = NULL, $user = NULL) {
  switch ($op) {
    case 'transition permitted':
      return ($id != $new_sid);
  }
}

/**
 * Implements hook_workflow_permitted_state_transitions_alter().
 */
function captconnect_custom_workflow_permitted_state_transitions_alter(array &$transitions, array $context) {
  // Remove any transition where the target state is the same as the current state.
  foreach ($transitions as $key => $transition) {
    if ($transition->sid == $transition->target_sid) {
      unset($transitions[$key]);
    }
  }
}

/**
 * Place to put special purpose stuff.
 */
function captconnect_custom_nancy() {
  global $user;
  $output = '';

  // Flush the schema cache.
  drupal_get_schema(NULL, TRUE);
  $output .= '<p>Schema cache cleared.</p>';

  return $output;
}
