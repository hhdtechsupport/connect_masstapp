<?php
/**
 * @file
 * Changes the order of content types on the node/add page.
 */

/**
 * Implements hook_menu().
 */
function node_add_order_menu() {
  $items = array();

  $items['admin/config/content/types_order'] = array(
    'title' => 'Order create content',
    'description' => 'Set how the "create content" page is ordered.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_add_order_settings'),
    'access arguments' => array('administer site configuration'),
    );

  return $items;
}

/**
 * Implements hook_theme().
 */
function node_add_order_theme($existing, $type, $theme, $path) {
  return array(
    'node_add_order' => array('variables' => array('content' => NULL)),
    'node_add_order_settings' => array('render element' => 'form'),
    );
}

/**
 * Implements hook_menu_alter().
 * Remove omitted types from menu.
 */
function node_add_order_menu_alter(&$items) {
  $omits = array_intersect_key(node_type_get_names(), array_filter(variable_get('node_add_order_omit', array())));
  foreach ($omits as $type => $name) {
    $path = 'node/add/' . strtr($type, '_', '-');
    $items[$path]['access callback'] = FALSE;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function node_add_order_theme_registry_alter(&$theme_registry) {
  $path = drupal_get_path('module', 'node_add_order');
  $theme_registry['node_add_list']['theme path'] = $path;
  $theme_registry['node_add_list']['function'] = 'theme_node_add_order';
  $theme_registry['node_add_list']['type'] = 'module';
}

/**
 * Change the order of the create content list.
 * Original copied from theme_node_add_list().
 */
function theme_node_add_order($variables) {
  $content = $variables['content'];
  $output = '';
  $order = variable_get('node_add_order_sort', 'alpha');

  if ($content) {
    foreach ($content as $key => $item) {
      switch ($order) {
        // Alphabetically.
        case 'alpha':
          $content[$key]['node_add_order'] = $item['title'];
          break;

        // Number of nodes.
        case 'count':
          $query = "SELECT COUNT(n.nid) FROM {node} n "
            . "INNER JOIN {node_type} t ON n.type = t.type "
            . "WHERE t.name = :type ";
          $count = db_query($query, array(':type' => $item['title']))->fetchField();
          // Go negative to sort descending.
          $content[$key]['node_add_order'] = -$count;
          break;

        // Last created.
        case 'last':
          $query = "SELECT MAX(n.created) FROM {node} n "
            . "INNER JOIN {node_type} t ON n.type = t.type "
            . "WHERE t.name = :type ";
          $last = db_query($query, array(':type' => $item['title']))->fetchField();
          // Go negative to sort descending.
          $content[$key]['node_add_order'] = -$last;
          break;
      }
    }
    uasort($content, '_node_add_order_compare');

    $omits = array_intersect_key(node_type_get_names(), array_filter(variable_get('node_add_order_omit', array())));

    $output .= '<dl class="node-type-list">';
    foreach ($content as $item) {
      $title = $item['title'];
      if ($order == 'count') {
        $title .= ' (' . -$item['node_add_order'] . ')';
      }
      $output .= '<dt>' . l($title, $item['href'], $item['localized_options']) . '</dt>';
      $output .= '<dd>' . filter_xss_admin($item['description']) . '</dd>';
    }
    $output .= '</dl>';
  }
  return $output;
}

/**
 * Sort comparison function.
 */
function _node_add_order_compare($a, $b) {
  if ($a['node_add_order'] == $b['node_add_order']) {
    return 0;
  }
  return ($a['node_add_order'] < $b['node_add_order'] ? -1 : 1);
}

/**
 * Settings page.
 */
function node_add_order_settings() {
  $form = array();

  $form['intro'] = array(
    '#type' => 'markup',
    '#markup' => '<p>'
      . t('This page allows you to change the order and existence of the content types on the "Create content" page and menu.')
      . '</p>',
    );

  $options = array(
    'alpha' => t('Alphabetically'),
    'count' => t('Number of uses'),
    'last' => t('Last created'),
    );

  $form['node_add_order_sort'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => variable_get('node_add_order_sort', 'alpha'),
    '#title' => t('Order of content types'),
    '#description' => t('Select the method by which you wish to order (sort) the content types.'),
    );

  $form['node_add_order_omit'] = array(
    '#type' => 'checkboxes',
    '#options' => node_type_get_names(),
    '#default_value' => variable_get('node_add_order_omit', array()),
    '#title' => t('Omit content types'),
    '#description' => t('The list, by default, contains all possible types.
      You may use this option to prevent some types from being created manually.'),
    );

  $form['#theme'] = 'node_add_order_settings';

  return system_settings_form($form);
}

function theme_node_add_order_settings(&$variables) {
  $css = '#node-add-order-settings {font-size: 100%;}
    table th, table td {width: 49%;}
    .description {white-space: normal !important;}
    ';
  drupal_add_css($css, 'inline');

  $form = $variables['form'];
  $rows = array();
  $style = 'vertical-align: top; white-space: normal';

  $output = drupal_render($form['intro']);

  $rows[] = array(
    array('data' => drupal_render($form['node_add_order_sort']), 'style' => $style),
    array('data' => drupal_render($form['node_add_order_omit']), 'style' => $style),
    );

  $output .= theme('table', array(
    'rows' => $rows,
    'attributes' => array('id' => 'node-add-order-settings'),
    ));

  $output .= drupal_render_children($form);
  return $output;
}
