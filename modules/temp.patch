diff --git a/modules/contrib/og/og.module b/modules/contrib/og/og.module
index 6f28205..ed6954f 100644
--- a/modules/contrib/og/og.module
+++ b/modules/contrib/og/og.module
@@ -2005,16 +2005,16 @@ function og_group($group_type, $gid, $values = array(), $save_created = TRUE) {
 
   if (!$og_membership && empty($field_name)) {
     $params = array(
-      '%entity-type' => $entity_type,
-      '%bundle' => $bundle,
-      '%group-type' => $group_type,
-      '%group-bundle' => $group_bundle,
+      '@entity-type' => $entity_type,
+      '@bundle' => $bundle,
+      '@group-type' => $group_type,
+      '@group-bundle' => $group_bundle,
     );
 
     // Allow getting fields not accessible by the user.
     $field_name = og_get_best_group_audience_field($entity_type, $entity, $group_type, $group_bundle, TRUE);
     if (!$field_name) {
-      throw new OgException(format_string('There are no OG fields in entity %entity-type and bundle %bundle referencing %group-type - %group-bundle.', $params));
+      throw new OgException(format_string('There are no OG fields in entity "@entity-type" and bundle "@bundle" referencing "@group-type" - "@group-bundle".', $params));
     }
   }
 
diff --git a/modules/custom/captconnect_custom/captconnect_custom.admin.inc b/modules/custom/captconnect_custom/captconnect_custom.admin.inc
index e1b6fc9..a6aff76 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.admin.inc
+++ b/modules/custom/captconnect_custom/captconnect_custom.admin.inc
@@ -267,15 +267,20 @@ function captconnect_custom_message_texts($form, $form_state) {
     );
 
   $form['captconnect_custom_event_full'] = array(
-    '#type' => 'textfield',
-    '#maxlength' => 256,
+    '#type' => 'textarea',
+    '#rows' => 1,
     '#title' => t('Event is full'),
     '#default_value' => variable_get('captconnect_custom_event_full',
       'We are sorry, but this event is full. You may try registering for another time or date.'),
     '#description' => t('When someone tries to register for an event that is '
-      . 'already at capacity, this message is displayed '
-      . '<br />'
-      . 'and the registration is denied.')
+      . 'already at capacity, this message is displayed and the registration '
+      . 'is denied.')
+      . '<br/>'
+      . t('You may use these tokens:')
+      . '<ul>'
+      . '<li>' . t('@capacity - the maximum capacity.') . '</li>'
+      . '</ul>',
+
     );
 
   $form['captconnect_custom_completion_email_anon'] = array(
diff --git a/modules/custom/captconnect_custom/captconnect_custom.info b/modules/custom/captconnect_custom/captconnect_custom.info
index 38e57ca..2e3a318 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.info
+++ b/modules/custom/captconnect_custom/captconnect_custom.info
@@ -2,3 +2,5 @@ name = CAPTConnect Custom
 description = Custom coding for this site.
 core = 7.x
 package = Custom
+
+files[] = captconnect_custom.exception.inc
diff --git a/modules/custom/captconnect_custom/captconnect_custom.module b/modules/custom/captconnect_custom/captconnect_custom.module
index df23641..8e2f73e 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.module
+++ b/modules/custom/captconnect_custom/captconnect_custom.module
@@ -28,6 +28,11 @@ function captconnect_custom_permission() {
       'description' => t('Register another user.'),
       'restrict access' => FALSE,
       ),
+    'view approvers' => array(
+      'title' => t('View Event Approvers'),
+      'description' => t('View approver selection for Events.'),
+      'restrict access' => FALSE,
+      ),
     );
   return $perms;
 }
@@ -366,18 +371,49 @@ function captconnect_custom_node_access($node, $op, $account) {
 
       // Well, we've run out of exceptions, so Drupal can take it from here.
       break;
-
+/*
     case 'delete':
-      return NODE_ACCESS_DENY;
+      if (user_access("delete own $node->type content")) {
+        return NODE_ACCESS_IGNORE;
+      }
+      return NODE_ACCESS_DENY; /* */
   }
 
   return NODE_ACCESS_IGNORE;
 }
 
-/*
+/**
+ * Implements hook_node_view().
+ */
 function captconnect_custom_node_view($node, $view_mode, $langcode) {
+//  dpm($node, $node->type);
+  switch ($node->type) {
+    case 'event':
+      if (!user_access('view approvers')) {
+        unset($node->content['field_approver']);
+      }
+      break;
+  }
+} /* */
+
+/**
+ * Implements hook_node_delete().
+ * Portals may have a bunch of sub-pages associated with them.
+ * We have to deal those pages when the portal is deleted.
+ */
+function captconnect_custom_node_delete($node) {
+//  dpm($node, $node->type . ' delete');
   switch ($node->type) {
-    case 'instance':
+    case 'portal':
+      $portal = entity_metadata_wrapper('node', $node);
+      foreach ($portal->field_portal_section->getIterator() as $portal_section) {
+        drupal_set_message('deleting portal_section ' . $portal_section->title->value());
+        foreach ($portal_section->field_portal_page->getIterator() as $portal_page) {
+          drupal_set_message('deleting portal_page --' . $portal_page->title->value());
+          $portal_page->delete();
+        }
+        $portal_section->delete();
+      }
       break;
   }
 } /* */
@@ -587,11 +623,8 @@ function captconnect_custom_form_user_profile_form_alter(&$form, &$form_state, $
   }
 
   if (isset($form['mimemail'])) {
-    // It is initially a fieldset, so let's just move the data up a level.
-    $mimemail = $form['mimemail']['mimemail_textonly'];
-    unset($form['mimemail']);
-    $form['mimemail'] = $mimemail;
-    $form['mimemail']['#weight'] = 20;
+    // Just get rid of this.
+    $form['mimemail']['#access'] = FALSE;
   }
 
   if (user_access('administer users')) {
@@ -640,6 +673,48 @@ function captconnect_custom_request_password(&$form, &$form_state) {
 }
 
 /**
+ * Helper function to preset the resource team group.
+ */
+function _captconnect_custom_preset_groups(&$form) {
+  global $user;
+  if (!isset($user->og_user_node)) {
+    // Provide a complete user object.
+    $user = user_load($user->uid);
+  }
+
+  // If they are not allowed to set the group, then prepopulate it.
+  $groups = array();
+  foreach ($user->og_user_node[LANGUAGE_NONE] as $grp) {
+    $groups[$grp['target_id']] = $grp['target_id'];
+  }
+
+  if (empty($groups)) {
+    throw new CaptException(t('You need to be a member of a team in order to create a portal.'));
+  }
+
+  // One would hope that OG is prepopulating this.
+  if (count($groups) > 1) {
+    // Not sure why I have to do this.
+    $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#required'] = TRUE;
+  }
+  else {
+    // They only have one group, so let's set it as the default
+    // and get rid of the containing group.
+    if ($form['og_group_ref'][LANGUAGE_NONE]['#cardinality'] == 1) {
+      $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'] = reset($groups);
+    }
+    else {
+      $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'] = $groups;
+    }
+    unset($form['#groups'][$form['#group_children']['og_group_ref']]);
+    unset($form['#group_children']['og_group_ref']);
+    $form['og_group_ref']['#access'] = FALSE;
+  }
+
+  return;
+}
+
+/**
  * Implements hook_form_alter().
  * Note: we need to be very late in the form cycle so we can see all the fields.
  */
@@ -647,36 +722,16 @@ function captconnect_custom_form_alter(&$form, &$form_state, $form_id) {
   global $user;
 //  dpm($form, $form_id);
   switch ($form_id) {
-    // Add/Edit Event.
-    case 'event_node_form':
-      // Provide a complete user object.
-      $user = user_load($user->uid);
+    // Add/Edit Portal.
+    case 'portal_node_form':
+      _captconnect_custom_preset_groups($form);
 
-      // If they are not allowed to set the group, then prepopulate it.
-      $groups = array();
-      foreach ($user->og_user_node[LANGUAGE_NONE] as $grp) {
-        $groups[$grp['target_id']] = $grp['target_id'];
-      }
-
-      // One would hope that OG is prepopulating this.
-      if (isset($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'])) {
-        if (count($groups) > 1) {
-          // Filter the groups options by which groups they are in.
-          $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#options'] =
-            array_intersect_key($form['og_group_ref'][LANGUAGE_NONE][0]['default']['#options'], $groups);
+      break;
 
-          // Not sure why I have to do this.
-          $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#required'] = TRUE;
-        }
-        else {
-          // They only have one group, so let's set it as the default
-          // and get rid of the containing group.
-          $form['og_group_ref'][LANGUAGE_NONE][0]['default']['#default_value'] = $groups;
-          unset($form['#groups'][$form['#group_children']['og_group_ref']]);
-          unset($form['#group_children']['og_group_ref']);
-          $form['og_group_ref']['#access'] = FALSE;
-        }
-      }
+    // Add/Edit Event.
+    case 'event_node_form':
+      _captconnect_custom_preset_groups($form);
+      $form['options']['#access'] = TRUE;
 
       break;
 
@@ -1282,7 +1337,7 @@ function captconnect_custom_proxy_flag_form_submit($form, $form_state) {
  * Implements hook_flag_validate().
  * Make sure there's room in the event.
  */
-function captconnect_custom_flag_validate($action, $flag, $entity_id, $account, $skip_permission_check, $flagging) {
+function _captconnect_custom_flag_validate($action, $flag, $entity_id, $account, $skip_permission_check, $flagging) {
   global $user;
   // Let's see if they are trying to register?
   if ($action == 'flag' && $flag->name == 'registration') {
@@ -1290,6 +1345,7 @@ function captconnect_custom_flag_validate($action, $flag, $entity_id, $account,
       // Do my debugging here.
     }
 
+    // Are they already registered?
     if ($flag->is_flagged($entity_id, $account->uid)) {
       $instance = node_load($entity_id);
       $event = node_load($instance->field_related_events[LANGUAGE_NONE][0]['target_id']);
@@ -1305,11 +1361,12 @@ function captconnect_custom_flag_validate($action, $flag, $entity_id, $account,
       $capacity = 0;
     }
 
-    // How many registrtations do we have currently?
+    // How many registrations do we have currently?
     $num_regs = $flag->get_count($entity_id);
     if ($num_regs >= $capacity && $capacity > 0) {
       return array('event-full' => t(variable_get('captconnect_custom_event_full',
-        'We are sorry, but this event is full. You may try registering for another time or date.')));
+        'We are sorry, but this event is full. You may try registering for another time or date.'),
+        array('@capacity' => $capacity)));
     }
   }
 }
diff --git a/modules/custom/captconnect_custom/captconnect_custom.pages.inc b/modules/custom/captconnect_custom/captconnect_custom.pages.inc
index a1a9756..305c9a8 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.pages.inc
+++ b/modules/custom/captconnect_custom/captconnect_custom.pages.inc
@@ -103,6 +103,11 @@ function captconnect_custom_view_registrations($node) {
         foreach ($users as $uid => $account) {
           $registrant = (user_access('administer users') ?
             l(format_username($account), "user/$account->uid/edit") : format_username($account));
+          $roles = $account->roles;
+          unset($roles[DRUPAL_AUTHENTICATED_RID]);
+          if ($user->uid == $uid) {
+            $roles[] = 'me';
+          }
 
           $join_class = array('join-link');
           $join_class[] = ($user->uid == $uid ? 'mark' : 'proxy');
@@ -145,10 +150,13 @@ function captconnect_custom_view_registrations($node) {
           }
 
           $table['rows'][] = array(
-            array('data' => $registrant, 'class' => array('registrant_name')),
-            array('data' => format_date($rows[$uid]), 'class' => array('date_registered')),
-            array('data' => $reg_link, 'class' => array('cancel_link')),
-            array('data' => $join, 'class' => $join_class),
+            'data' => array(
+              array('data' => $registrant, 'class' => array('registrant-name')),
+              array('data' => format_date($rows[$uid]), 'class' => array('date-registered')),
+              array('data' => $reg_link, 'class' => array('cancel-link')),
+              array('data' => $join, 'class' => $join_class),
+            ),
+            'class' => array_map('drupal_html_class', $roles),
             );
         }
       }
@@ -294,7 +302,7 @@ function captconnect_custom_anon_pending() {
   // See if we are to do cleanup.
   if (isset($_GET['delete'])) {
     $clean_up = $_GET['delete'];
-    drupal_set_message(t('Removing records older than @int days.', 
+    drupal_set_message(t('Removing records older than @int days.',
       array('@int' => $clean_up)));
     // Make it in seconds.
     $clean_up = $clean_up * 86400;
diff --git a/themes/capt/css/styles.css b/themes/capt/css/styles.css
index fc20493..fcd1a2e 100644
--- a/themes/capt/css/styles.css
+++ b/themes/capt/css/styles.css
@@ -10509,3 +10509,31 @@ body.page-user-register:not(.node-type-event) {
     }*/
   }
 }
+
+#registrations-list tr.me td {
+  background-color: #ffeeee;
+  border-width: 2px 0;
+  border-style: solid;
+  border-color: #aa4444;
+}
+
+#registrations-list tr.event-creator td.registrant-name {
+  background-color: #ddffaa;
+}
+
+#registrations-list tr.event-approver td.registrant-name {
+  background-color: #ffddaa;
+}
+
+#registrations-list tr.site-maintainer td.registrant-name {
+  background-color: #eeffee;
+}
+
+#registrations-list tr.administrator td.registrant-name {
+  background-color: #ffffcc;
+}
+
+.field-name-field-portal-image {
+  float: left;
+  margin-right: 2em;
+}
\ No newline at end of file
