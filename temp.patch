diff --git a/modules/custom/captconnect_custom/captconnect_custom.admin.inc b/modules/custom/captconnect_custom/captconnect_custom.admin.inc
index 6884944..d027c6b 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.admin.inc
+++ b/modules/custom/captconnect_custom/captconnect_custom.admin.inc
@@ -189,7 +189,17 @@ function captconnect_custom_admin_settings($form, $form_state) {
       displayed in a Registrations list.'),
     );
 
+  $form['captconnect_custom_questions_as_tab'] = array(
+    '#type' => 'radios',
+    '#options' => $noyes,
+    '#title' => t('Show the Registration Questions in a tab.'),
+    '#default_value' => variable_get('captconnect_custom_questions_as_tab', 0),
+    '#description' => t('The registration questions and answers can be shown in 
+      a tab on the event page.'),
+    );
+
   $form['#theme'] = 'captconnect_custom_admin_settings';
+  $form['#submit'][] = 'captconnect_custom_admin_settings_submit';
 
   return system_settings_form($form);
 }
@@ -258,7 +268,7 @@ function theme_captconnect_custom_admin_settings($variables) {
 
   $rows[] = array(
     array('data' => drupal_render($form['captconnect_custom_register_lines_per_page']), 'style' => $style),
-//    array('data' => drupal_render($form['captconnect_custom_account_check_grace']), 'style' => $style),
+    array('data' => drupal_render($form['captconnect_custom_questions_as_tab']), 'style' => $style),
     );
 
   $output .= theme('table', array(
@@ -271,6 +281,16 @@ function theme_captconnect_custom_admin_settings($variables) {
 }
 
 /**
+ * Submission Handler.
+ * Reset menu cache because of tab setting.
+ */
+function captconnect_custom_admin_settings_submit(&$form, &$form_state) {
+  // Variable_set forces it to be uncached.
+  variable_set('captconnect_custom_questions_as_tab', $form_state['values']['captconnect_custom_questions_as_tab']);
+  menu_rebuild();  
+}
+
+/**
  * Message texts form.
  */
 function captconnect_custom_message_texts($form, $form_state) {
diff --git a/modules/custom/captconnect_custom/captconnect_custom.module b/modules/custom/captconnect_custom/captconnect_custom.module
index d7da6db..15b55b4 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.module
+++ b/modules/custom/captconnect_custom/captconnect_custom.module
@@ -98,6 +98,19 @@ function captconnect_custom_menu() {
     'file' => 'captconnect_custom.pages.inc',
     );
 
+  if (variable_get('captconnect_custom_questions_as_tab', 0)) {
+    $items['node/%node/questions'] = array(
+      'title' => 'Questions',
+      'page callback' => 'captconnect_custom_view_questions',
+      'page arguments' => array(1),
+      'access callback' => 'captconnect_custom_access_questions',
+      'access arguments' => array(1),
+      'weight' => 0,
+      'type' => MENU_LOCAL_TASK,
+      'file' => 'captconnect_custom.pages.inc',
+      );
+    }
+
   $items['event/participate/%node/%user'] = array(
     'title' => 'Flag participation for someone else',
     'page callback' => 'captconnect_custom_participate_someone_else',
@@ -644,6 +657,14 @@ function captconnect_custom_access_registrations($node) {
 
 /**
  * Menu access callback.
+ * Decide whether or not to show the "Questions" tab on Events.
+ */
+function captconnect_custom_access_questions($node) {
+  return ($node->type == 'event' && user_access('view registration questions'));
+}
+
+/**
+ * Menu access callback.
  * Decide whether or not to show the "Notifications" tab on Events.
  */
 function captconnect_custom_access_notifications($node) {
@@ -900,7 +921,7 @@ function _captconnect_custom_preset_groups(&$form) {
   if (!isset($form['og_group_ref'])) {
     return;
   }
-  if (!isset($user->og_user_node)) {
+  if (!isset($user->og_user_node[LANGUAGE_NONE])) {
     // Provide a complete user object.
     $user = user_load($user->uid);
   }
@@ -997,7 +1018,6 @@ function captconnect_custom_form_alter(&$form, &$form_state, $form_id) {
 
     // Edit Event Questions.
     case 'event_questions_node_form':
-      dpm($form, 'form');
       if (!empty($form['nid']['#value'])) {
         if (isset($form['#node']->field_answers[LANGUAGE_NONE])) {
           drupal_set_message('This question has already been answered at least once,
diff --git a/modules/custom/captconnect_custom/captconnect_custom.pages.inc b/modules/custom/captconnect_custom/captconnect_custom.pages.inc
index d63c11d..21bc926 100644
--- a/modules/custom/captconnect_custom/captconnect_custom.pages.inc
+++ b/modules/custom/captconnect_custom/captconnect_custom.pages.inc
@@ -15,16 +15,11 @@ function captconnect_custom_view_registrations($node) {
 
     $event = entity_metadata_wrapper('node', $node);
     $date_format = variable_get('captconnect_custom_register_date_format', 'long_day_at_time');
+    $lines_per_page = variable_get('captconnect_custom_register_lines_per_page', 10);
 
     $reg_flag = flag_get_flag('registration');
     $part_flag = flag_get_flag('participate');
 
-    // Query for registrations below.
-    $reg_query = "SELECT uid, timestamp FROM {flagging} "
-      . "WHERE entity_id = :instance "
-      . "AND fid = 2 "      // Registration.
-      ;
-
     // Get all the instances.
     $instances = array();
     foreach ($event->field_date_instance->getIterator() as $instance) {
@@ -76,13 +71,11 @@ function captconnect_custom_view_registrations($node) {
       if (variable_get('captconnect_custom_registrations_link_instance', 1)
       && (user_access('edit any instance content')
       || (user_access('edit own instance content') && $instance->uid->value() == $user->uid))) {
-//        $title_link = l($instance->label(), 'node/' . $instance->nid->value() . '/edit',
         $title_link = l($instance_label, 'node/' . $instance->nid->value() . '/edit',
           array('query' => drupal_get_destination()));
 
       }
       else {
-//        $title_link = $instance->label();
         $title_link = $instance_label;
       }
 
@@ -104,7 +97,16 @@ function captconnect_custom_view_registrations($node) {
       $link = $instance->field_link->value();
 
       // Get all the registration details.
-      $rows = db_query($reg_query, array('instance' => $instance->nid->value()))->fetchAllKeyed();
+      $rows = db_select('flagging', 'f')
+        ->fields('f', array('uid', 'timestamp'))
+        ->condition('f.entity_id', $instance->nid->value())
+        ->condition('f.fid', $reg_flag->fid)
+        ->extend('PagerDefault')
+        ->limit($lines_per_page)
+        ;
+      $rows = $rows->execute()
+        ->fetchAllKeyed()
+        ;
 
       if (count($rows) > 0) {
         $users = entity_load('user', array_keys($rows));
@@ -186,6 +188,11 @@ function captconnect_custom_view_registrations($node) {
       }
     }
 
+    // Place the table and pager.
+    $ret = theme('table', $table);
+    $pager = array('#theme' => 'pager', '#weight' => 50);
+    $ret .= drupal_render($pager);
+
     // In order to access the "register other" button, they need
     // to be in the same group and have 'register others' permission.
     if (user_access('bypass node access')) {
@@ -216,8 +223,75 @@ function captconnect_custom_view_registrations($node) {
       $register_others = NULL;
     }
 
-    return theme('table', $table) . drupal_render($register_others);
+    $ret .= drupal_render($register_others);
+
+    return $ret;
+  }
+}
+
+/**
+ * Menu callback.
+ * View the registration questions for the Event.
+ */
+function captconnect_custom_view_questions($node) {
+  global $user;
+//  dpm($node, 'captconnect_custom_view_questions');
+  $no_yes = array(t('No'), t('Yes'));
+  $output = '<div id="questions-and-answers">';
+  $css = '#questions-and-answers table {width:31%;float:left;margin-right:1em;}
+    ';
+  drupal_add_css($css, 'inline');
+
+  if ($node->type == 'event') {
+    if (isset($node->field_question[LANGUAGE_NONE])) {
+      foreach ($node->field_question[LANGUAGE_NONE]as $quest) {
+        $question = node_load($quest['target_id']);
+        $table = array(
+          'header' => array(),
+          'rows' => array(),
+          'empty' => t('Could not find anything.'),
+          'attributes' => array(
+            'id' => 'answers-' . $question->nid,
+            'class' => array('question-answers'),
+            ),
+          'caption' => l($question->title, 'node/'.$question->nid),
+          );
+        // Handle answers here.
+        if (isset($question->field_answers[LANGUAGE_NONE])) {
+          foreach ($question->field_answers[LANGUAGE_NONE] as $ans) {
+            $answer = node_load($ans['target_id']);
+            $answ = $answer->field_answer[LANGUAGE_NONE][0]['value'];
+            switch ($question->field_question_type[LANGUAGE_NONE][0]['value']) {
+              case 'yesno':
+                $answ = $no_yes[$answ];
+                break;
+
+              case 'select':
+                $answ = array();
+                if (count($answer->field_answer[LANGUAGE_NONE])) {
+                  foreach ($answer->field_answer[LANGUAGE_NONE] as $value) {
+                    $answ[] = $value['safe_value'];
+                  }
+                  $answ = (count($answ) > 1 ?
+                    theme('item_list', array('items' => $answ)) : $answ[0]);
+                }
+                break;
+
+              case 'text':
+                break;
+            }
+            $table['rows'][] = array($answ);
+          }
+        }
+        $output .= theme('table', $table);
+      }
+    }
   }
+  else {
+    $output = t("I don't understand how you got here.");
+  }
+
+  return $output . '</div>';
 }
 
 /**
diff --git a/modules/custom/flag_confirm_plus/flag_confirm_plus.module b/modules/custom/flag_confirm_plus/flag_confirm_plus.module
index c435824..9ae2442 100644
--- a/modules/custom/flag_confirm_plus/flag_confirm_plus.module
+++ b/modules/custom/flag_confirm_plus/flag_confirm_plus.module
@@ -150,6 +150,7 @@ function flag_confirm_plus_form_flag_confirm_alter(&$form, &$form_state, $form_i
             }
             else {
               $form['questions'][$nid]['#type'] = 'textfield';
+              $form['questions'][$nid]['#maxlength'] = 255;
             }
             break;
 
@@ -193,9 +194,23 @@ function flag_confirm_plus_form_flag_confirm_alter(&$form, &$form_state, $form_i
 
   foreach ($info as $field_name => $field_info) {
     if ($field_name == 'og_user_node') {
-      $form[$field_name][LANGUAGE_NONE][0]['default']['#default_value'] =
-          _flag_confirm_plus_set_field($user->{$field_name}[LANGUAGE_NONE], $form[$field_name][LANGUAGE_NONE][0]['default']['#type']);
+      if (isset($user->og_user_node[LANGUAGE_NONE])) {
+        $grps = array();
+        foreach ($user->og_user_node[LANGUAGE_NONE] as $info) {
+          $grps[$info['target_id']] = $info['target_id'];
+        }
+        $form['og_user_node'][LANGUAGE_NONE][0]['default']['#default_value'] = $grps;
+      }
+      else {
+        drupal_set_message(t('Why are you not in a group?'), 'warning');
+      }
+    }
+    
+    if ($field_name == 'field_country') {
+      $form['field_country'][LANGUAGE_NONE]['#default_value'] = 
+        $user->field_country[LANGUAGE_NONE][0]['target_id'];
     }
+    
     if (isset($form[$field_name])) {
       if (isset($info[$field_name]['display']['default']['module'])
       && $info[$field_name]['display']['default']['module'] == 'entityreference') {
@@ -216,7 +231,9 @@ function flag_confirm_plus_form_flag_confirm_alter(&$form, &$form_state, $form_i
         }
       }
     }
-  } /* */
+  }
+    dpm($form, $form_id);
+
 
   // Make sure we get a crack at the values.
   $form['#submit'][] = '_flag_confirm_plus_event_registration_submit';
@@ -243,6 +260,8 @@ function _flag_confirm_plus_set_field($values, $type) {
 
 /**
  * Submission handler.
+ * Handles saving answers to the questions and
+ * saves profile information back to the user.
  */
 function _flag_confirm_plus_event_registration_submit($form, &$form_state) {
   global $user;
@@ -251,7 +270,6 @@ function _flag_confirm_plus_event_registration_submit($form, &$form_state) {
 
 //  dpm($form_state['values'], __FUNCTION__.' form_state[values]');
   form_state_values_clean($form_state);
-//  $questions = $form['#questions'];
 
   if (isset($form_state['values']['questions']) && count($form_state['values']['questions']) > 0) {
     $nodes = entity_load('node', array_keys($form_state['values']['questions']));
@@ -283,6 +301,7 @@ function _flag_confirm_plus_event_registration_submit($form, &$form_state) {
     }
   }
 
+//  unset($form_state['values']['og_user_node']);
   $result = user_save($account, $form_state['values']);
   if (!$result) {
     drupal_set_message(t('Saving of updated profile information failed.'), 'warning');
@@ -327,7 +346,7 @@ function flag_confirm_plus_flag_unflag($flag, $entity_id, $account, $flagging) {
  * Display question and answer info.
  */
 function flag_confirm_plus_node_view($node, $view_mode, $langcode) {
-//  dpm($node, $node->type.' '.$view_mode);
+//  dpm($node, __FUNCTION__."$node->type $view_mode");
   // Always do this.
   switch ($node->type) {
     case 'event':
@@ -396,7 +415,11 @@ function flag_confirm_plus_node_view($node, $view_mode, $langcode) {
           foreach ($node->field_answers[LANGUAGE_NONE] as $answer_info) {
             $answer = entity_metadata_wrapper('node', node_load($answer_info['target_id']));
             if ($yesno) {
-              $ans = $no_yes[$answer->field_answer->value()];
+              $ans = $answer->field_answer->value();
+              if (is_array($ans)) {
+                $ans = reset($ans);
+              }
+              $ans = $no_yes[$ans];
             }
             else {
               if ($multiple) {
@@ -404,10 +427,15 @@ function flag_confirm_plus_node_view($node, $view_mode, $langcode) {
                 foreach ($answer->field_answer->value() as $data) {
                   $list[] = $data;
                 }
-                $ans = theme('item_list', array('items' => $list));
+                $ans = (count($list) > 1 ? 
+                  theme('item_list', array('items' => $list)) : $list[0]);
               }
               else {
                 $ans = $answer->field_answer->value();
+                if (is_array($ans)) {
+                  // Just get first. Why is it an array?
+                  $ans = reset($ans);
+                }
               }
             }
             $table['rows'][] = array(
